diff --git a/etc/global.json b/etc/global.json
new file mode 100644
index 0000000..8c2b199
--- /dev/null
+++ b/etc/global.json
@@ -0,0 +1,3 @@
+{
+    "test_dir": "tests"
+}
\ No newline at end of file
diff --git a/etc/servicelayer.json b/etc/servicelayer.json
new file mode 100644
index 0000000..836174e
--- /dev/null
+++ b/etc/servicelayer.json
@@ -0,0 +1,3 @@
+{
+    "url": "http://dev4-service/rest"
+}
\ No newline at end of file
diff --git a/src/Onix/Api.php b/src/Onix/Api.php
index 923d8ca..a060666 100755
--- a/src/Onix/Api.php
+++ b/src/Onix/Api.php
@@ -6,6 +6,11 @@ class Api
 {
     private $runner;
 
+    private $allowed_methods = array(
+        'run' => 'runTest',
+        'list' => 'listTests'
+    );
+
     public function __construct()
     {
         $this->runner = new Runner();
@@ -17,8 +22,15 @@ class Api
         if (empty($parsed) || !isset($parsed['method'])) {
             $return = array('Status' => 'N', 'ErrMsg' => 'Nothing to do');
         } else {
-
-            $return = array('Status' => 'Y');
+            if (array_key_exists($parsed['method'], $this->allowed_methods) &&
+                method_exists($this, $this->allowed_methods[$parsed['method']])) {
+                $return = call_user_func_array(
+                    array($this, $this->allowed_methods[$parsed['method']]),
+                    array($parsed)
+                );
+            } else {
+                $return = array('Status' => 'N', 'ErrMsg' => 'Invalid method');
+            }
         }
 
         return $return;
@@ -26,6 +38,22 @@ class Api
 
     private function runTest($params = array())
     {
+        if (!isset($params['test']) || !isset($params['context'])) {
+            $return = array('Status' => 'N', 'ErrMsg' => 'No test or context provided');
+        } else {
+            $results = $this->runner->runTest($params['context'], $params['test']);
+            if (!isset($results['Status']) || $results['Status'] == 'N') {
+                $return = array('Status' => 'N', 'ErrMsg' => isset($results['ErrMsg']) ? $results['ErrMsg'] : '');
+            } else {
+                $return = array('Status' => 'Y', 'Results' => $results['Results']);
+            }
+        }
 
+        return $return;
+    }
+
+    private function listTests()
+    {
+        return $this->runner->listTests();
     }
-}
\ No newline at end of file
+}
diff --git a/src/Onix/Config.php b/src/Onix/Config.php
new file mode 100644
index 0000000..cb32110
--- /dev/null
+++ b/src/Onix/Config.php
@@ -0,0 +1,70 @@
+<?php
+
+namespace Onix;
+
+class Config
+{
+    private static $instance;
+
+    private $config_dir;
+
+    private $config_data;
+
+    private $context;
+
+    private function __construct($config_dir = null)
+    {
+        if (!$config_dir) {
+            $config_dir = ROOT_DIR.'/etc';
+        }
+
+        if (!is_readable($config_dir)) {
+            throw new \Exception('Unable to read from config directory: '.$config_dir);
+        }
+
+        $this->config_dir = $config_dir;
+
+        $this->loadConfigs();
+    }
+
+    public static function getInstance($refresh = false)
+    {
+        if ($refresh || !self::$instance instanceof self) {
+            self::$instance = new self;
+        }
+
+        return self::$instance;
+    }
+
+    private function loadConfigs()
+    {
+        foreach (glob($this->config_dir.'/*.json') as $config_file) {
+            $raw_contents = file_get_contents($config_file);
+            $data = json_decode($raw_contents, true);
+            if (!is_array($data) || empty($data)) {
+                throw new \Exception('Unable to load config file: '.$config_file);
+            }
+            $this->config_data[preg_replace('/\.json$/', '', basename($config_file))] = $data;
+        }
+    }
+
+    public function get($name)
+    {
+        return isset($this->config_data[$name]) ? $this->config_data[$name] : null;
+    }
+
+    public function setContext($context)
+    {
+        $this->context = $context;
+    }
+
+    public function getContext()
+    {
+        return $this->context;
+    }
+
+    public function getContextConfig($context = null)
+    {
+        
+    }
+}
diff --git a/src/Onix/Logger.php b/src/Onix/Logger.php
index 47c72ed..d5ce819 100755
--- a/src/Onix/Logger.php
+++ b/src/Onix/Logger.php
@@ -27,6 +27,8 @@ class Logger
     {
         $this->test_data[$name] = array();
         $this->current_test = &$this->test_data[$name];
+        $this->current_test['steps'] = array();
+        $this->current_test['result'] = 'pass';
     }
 
     public function pass($msg, $data = array())
@@ -40,7 +42,7 @@ class Logger
             $results['extra'] = $data;
         }
 
-        $this->current_test[] = $results;
+        $this->current_test['steps'][] = $results;
     }
 
     public function fail($msg, $data = array())
@@ -54,18 +56,30 @@ class Logger
             $results['extra'] = $data;
         }
 
-        $this->current_test[] = $results;
+        $this->current_test['steps'][] = $results;
+
+        $this->current_test['result'] = 'fail';
 
         throw new TestFailedException($msg);
     }
 
     public function info($msg)
     {
-        $this->current_test[] = array('message' => $msg);
+        $this->current_test['steps'][] = array('message' => $msg);
+    }
+
+    public function getCurrentResults()
+    {
+        return $this->current_test;
+    }
+
+    public function getAllResults()
+    {
+        return $this->test_data;
     }
 
     public function output()
     {
         print_r($this->test_data);
     }
-}
\ No newline at end of file
+}
diff --git a/src/Onix/Runner.php b/src/Onix/Runner.php
index 863efe1..1633fab 100755
--- a/src/Onix/Runner.php
+++ b/src/Onix/Runner.php
@@ -5,20 +5,27 @@ namespace Onix;
 class Runner
 {
     private $allowed_methods = array(
-        'run',
-        'list'
+        'run' => 'runAllTests',
+        'list' => 'listTests'
     );
 
-    public function __construct() {
+    private $config;
+
+    private $test_dir;
+
+    public function __construct()
+    {
+        $this->config = Config::getInstance()->get('global');
+        $this->test_dir = ROOT_DIR.'/'.$this->config['test_dir'];
     }
 
     public function start($argv)
     {
         //$this->parseOptions(&$argv);
-        if (isset($argv[1]) && in_array($argv[1], $this->allowed_methods)) {
-            if (method_exists($this, $argv[1].'Tests')) {
+        if (isset($argv[1]) && array_key_exists($argv[1], $this->allowed_methods)) {
+            if (method_exists($this, $this->allowed_methods[$argv[1]])) {
                 call_user_func_array(
-                    array($this, $argv[1].'Tests'), 
+                    array($this, $this->allowed_methods[$argv[1]]),
                     array(isset($argv[2]) ? array_splice($argv, 2) : array())
                 );
             } else {
@@ -37,32 +44,80 @@ class Runner
 
     private function usage($msg = '')
     {
-        echo "Usage: say something nice\n";
+        echo "Usage: say something interesting here\n";
     }
 
-    public function runTests($params)
+    public function runAllTests($params)
     {
-        foreach (glob(TEST_DIR.'/*.php') as $test_file) {
-            if (is_readable($test_file)) {
-                echo '>> '.Utility::getTestNameFromFile($test_file);
-                ob_start();
-                try {
-                    include($test_file);
-                    echo " (PASS)\n";
-                } catch (TestFailedException $tfe) {
-                    echo " (FAIL)\n";
-                } catch (\Exception $e) {
-
+        if ($handle = opendir($this->test_dir)) {
+            while (false !== ($entry = readdir($handle))) {
+                if ($entry == '.' || $entry == '..') {
+                    continue;
+                } elseif (is_dir($this->test_dir.'/'.$entry)) {
+                    echo "[[".$entry."]]\n";
+                    Config::getInstance()->setContext($entry);
+                    $this->parseDirectory($this->test_dir.'/'.$entry);
                 }
-                $test_output = ob_get_clean(); // We'll probably want this later
-                print_r($test_output);
             }
         }
-        Logger::getInstance()->output();
     }
 
-    public function listTests($params)
+    public function runTest($context, $test_name)
+    {
+        Config::getInstance()->setContext($context);
+        return $this->execute($this->test_dir.'/'.$context.'/'.$test_name.'.php');
+    }
+
+    private function execute($test_file)
+    {
+        if (!is_readable($test_file)) {
+            $return = array('Status' => 'N', 'ErrMsg' => 'Invalid test specified');
+        } else {
+            ob_start();
+            try {
+                include($test_file);
+            } catch (TestFailedException $tfe) {
+                // No need to do anything with this, the Logger will have recorded the error
+            } catch (\Exception $e) {
+                // Something bad happened
+            }
+            $test_output = ob_get_clean();
+            $return = array('Status' => 'Y', 'Results' => Logger::getInstance()->getCurrentResults());
+        }
+
+        return $return;
+    }
+
+    public function listTests($params = array())
     {
+        $tests = array();
+        $tests = $this->parseDirectory($this->test_dir, false);
+
+        return array('Status' => 'Y', 'Results' => $tests);
+    }
+
+    private function parseDirectory($directory, $run_tests = true)
+    {
+        $listing = array();
+
+        if ($handle = opendir($directory)) {
+            while (false !== ($entry = readdir($handle))) {
+                if ($entry == '.' || $entry == '..') {
+                    continue;
+                } elseif (is_dir($directory.'/'.$entry)) {
+                    $listing[$entry] = $this->parseDirectory($directory.'/'.$entry, $run_tests);
+                } elseif (preg_match('/([a-z0-9_\-]+)\.php$/i', $entry, $matches)) {
+                    $listing[] = $matches[1];
+                    if ($run_tests && is_readable($directory.'/'.$entry)) {
+                        echo " >> ".Utility::getTestNameFromFile($directory.'/'.$entry).'... ';
+                        $test_results = $this->execute($directory.'/'.$entry);
+                        echo (!isset($test_results['result']) || $test_results['result'] == 'fail' ? 'PASS' : 'FAIL')."\n";
+                    }
+                }
+            }
+            closedir($handle);
+        }
 
+        return $listing;
     }
-}
\ No newline at end of file
+}
diff --git a/src/Onix/ServiceTest.php b/src/Onix/ServiceTest.php
index 4c82b6c..e734517 100755
--- a/src/Onix/ServiceTest.php
+++ b/src/Onix/ServiceTest.php
@@ -14,10 +14,13 @@ class ServiceTest
 
     private $body_type;
 
+    private $config;
+
     public function __construct($test_name = null)
     {
         $this->client = new \GuzzleHttp\Client();
         $this->logger = Logger::getInstance();
+        $this->config = Config::getInstance()->getContextConfig();
         
         if (!$test_name) {
             $trace = debug_backtrace();
@@ -36,24 +39,24 @@ class ServiceTest
     public function get($url, $options = array())
     {
         try {
-            $this->response = $this->client->get($url, $options);
-            $this->logger->pass('Get '.$url);
+            $this->response = $this->client->get($this->config['url'].$url, $options);
+            $this->logger->pass('Get '.$this->config['url'].$url);
         } catch (TestFailedException $tfe) {
             throw $tfe;
         } catch (\Exception $e) {
-            $this->logger->fail('Get '.$url, array('exception' => $e->getMessage()));
+            $this->logger->fail('Get '.$this->config['url'].$url, array('exception' => $e->getMessage()));
         }
     }
 
     public function post($url, $data = array(), $options = array())
     {
         try {
-            $this->response = $this->client->post($url, $data, $options);
-            $this->logger->pass('Post '.$url);
+            $this->response = $this->client->post($this->config['url'].$url, $data, $options);
+            $this->logger->pass('Post '.$this->config['url'].$url);
         } catch (TestFailedException $tfe) {
             throw $tfe;
         } catch (\Exception $e) {
-            $this->logger->fail('Post '.$url, array('exception' => $e->getMessage()));
+            $this->logger->fail('Post '.$this->config['url'].$url, array('exception' => $e->getMessage()));
         }
     }
 
@@ -117,7 +120,7 @@ class ServiceTest
 
     public function isValidJSON()
     {
-        $this->decoded_body = json_decode($this->response->getBody());
+        $this->decoded_body = json_decode($this->response->getBody(), true);
         if (!$this->decoded_body) {
             $this->logger->fail('JSON not valid', array('exception' => Utility::decodeJSONError(json_last_error())));
         } else {
@@ -132,6 +135,22 @@ class ServiceTest
             $this->isValidJSON();
         }
 
-        
+        $pointer = $this->decoded_body;
+
+        if ($path != '/') {
+            foreach (explode('/', ltrim($path, '/')) as $level) {
+                if (array_key_exists($level, $pointer)) {
+                    $pointer = $pointer[$level];
+                } else {
+                    $this->logger->fail('JSON element not found: '.$path);
+                }
+            }
+        }
+
+        if (is_array($pointer) && count($pointer) < $min_count) {
+            $this->logger->fail('JSON element found, but below minimum count: '.$path.' ('.count($pointer).'/'.$min_count.')');
+        } else {
+            $this->logger->pass('JSON element found: '.$path.' ('.count($pointer).'/'.$min_count.')');
+        }
     }
 }
diff --git a/src/Onix/Utility.php b/src/Onix/Utility.php
index 569aec7..63cc547 100755
--- a/src/Onix/Utility.php
+++ b/src/Onix/Utility.php
@@ -18,7 +18,17 @@ class Utility
 
     public static function getTestNameFromFile($test_file)
     {
-        return preg_replace('/\.[a-z0-9_]+$/', '', basename($test_file));
+        $config = Config::getInstance();
+        $global = $config->get('global');
+        return preg_replace(
+            '/\.[a-z0-9_]+$/',
+            '',
+            str_replace(
+                ROOT_DIR.'/'.$global['test_dir'].'/'.$config->getContext(),
+                '',
+                $test_file
+            )
+        );
     }
 
     public static function decodeJSONError($error_code)
@@ -29,4 +39,4 @@ class Utility
             return 'Unknown error';
         }
     }
-}
\ No newline at end of file
+}
diff --git a/tests/Fund__ff_fund_search.php b/tests/Fund__ff_fund_search.php
new file mode 100644
index 0000000..99f5524
--- /dev/null
+++ b/tests/Fund__ff_fund_search.php
@@ -0,0 +1,13 @@
+<?php
+
+$test = new \Onix\ServiceTest();
+
+$test->get('/Fund/ff_fund_search/name_match/fidelity/format/xml');
+$test->isResponseCode(200);
+$test->isValidXML();
+$test->seeXMLElement('/RestServiceFund/item', 100);
+
+$test->get('/Fund/ff_fund_search/name_match/fidelity/format/json');
+$test->isResponseCode(200);
+$test->isValidJSON();
+$test->seeJSONElement('/', 100);
diff --git a/tests/OldIllusionTest.php b/tests/OldIllusionTest.php
deleted file mode 100755
index 88a3a8d..0000000
--- a/tests/OldIllusionTest.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-$test = new \Onix\ServiceTest();
-
-$test->get('http://www.oldillusion.com/onix/sample.xml');
-//$test->isResponseCode(200);
-//$test->isValidXML();
-//$test->seeXMLElement('/catalog/book[@id]', 15);
-
-$test->get('http://www.oldillusion.com/onix/sample.json');
-$test->isValidJSON();
-$test->seeJSONElement('book', 15);
\ No newline at end of file
diff --git a/tests/servicelayer/Fund/ff_fund_search.php b/tests/servicelayer/Fund/ff_fund_search.php
new file mode 100644
index 0000000..b0c9d79
--- /dev/null
+++ b/tests/servicelayer/Fund/ff_fund_search.php
@@ -0,0 +1,13 @@
+<?php
+
+$test = new \Onix\ServiceTest();
+
+$test->get('http://dev4-service/rest/Fund/ff_fund_search/name_match/fidelity/format/xml');
+$test->isResponseCode(200);
+$test->isValidXML();
+$test->seeXMLElement('/RestServiceFund/item', 100);
+
+$test->get('http://dev4-service/rest/Fund/ff_fund_search/name_match/fidelity/format/json');
+$test->isResponseCode(200);
+$test->isValidJSON();
+$test->seeJSONElement('/', 100);
